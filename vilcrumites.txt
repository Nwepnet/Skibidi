local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- Wait for character
local function waitForCharacter()
	player.Character = player.Character or player.CharacterAdded:Wait()
	local character = player.Character
	local humanoid = character:WaitForChild("Humanoid")
	local hrp = character:WaitForChild("HumanoidRootPart")
	return character, humanoid, hrp
end

local character, humanoid, hrp = waitForCharacter()

-- Animations
local idleAnim = Instance.new("Animation")
idleAnim.AnimationId = "rbxassetid://97172005"

local flyAnim = Instance.new("Animation")
flyAnim.AnimationId = "rbxassetid://90872539"

local idleTrack = humanoid:LoadAnimation(idleAnim)
local flyTrack = humanoid:LoadAnimation(flyAnim)

-- Settings
local flying = false
local currentSpeed = 0
local maxSpeed = 100
local acceleration = 3.5
local deceleration = 4
local moveVector = Vector3.zero

-- Create Tool
local tool = Instance.new("Tool")
tool.Name = "Viltrum's Flight"
tool.RequiresHandle = false
tool.Parent = player:WaitForChild("Backpack")

-- Get move direction (mobile and PC)
local function getMoveVector()
	return humanoid.MoveDirection
end

-- Start Flight
local function startFlight()
	if flying then return end
	flying = true
	currentSpeed = 0
	humanoid.AutoRotate = false
	humanoid:ChangeState(Enum.HumanoidStateType.Physics)
	idleTrack:Play()
end

-- Stop Flight
local function stopFlight()
	if not flying then return end
	flying = false
	currentSpeed = 0
	humanoid.AutoRotate = true
	humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
	idleTrack:Stop()
	flyTrack:Stop()
	hrp.Velocity = Vector3.zero
end

-- Toggle Flight
local function toggleFlight()
	if flying then
		stopFlight()
	else
		startFlight()
	end
end

-- Activate tool = toggle flight
tool.Activated:Connect(toggleFlight)
tool.Unequipped:Connect(stopFlight)

-- Flight logic
RunService.RenderStepped:Connect(function(dt)
	if not flying or not character or not character.Parent then return end

	moveVector = getMoveVector()
	local moving = moveVector.Magnitude > 0.1

	if moving then
		if not flyTrack.IsPlaying then
			idleTrack:Stop()
			flyTrack:Play()
		end
		currentSpeed = math.min(currentSpeed + acceleration, maxSpeed)
	else
		if not idleTrack.IsPlaying then
			flyTrack:Stop()
			idleTrack:Play()
		end
		currentSpeed = math.max(currentSpeed - deceleration, 0)
	end

	local cam = workspace.CurrentCamera
	local camLook = cam.CFrame.LookVector

	-- Force direction horizontal
	local horizontalDirection = Vector3.new(camLook.X, camLook.Y, camLook.Z).Unit
	local velocity = horizontalDirection * currentSpeed
	hrp.Velocity = velocity

	-- Make player flat to camera direction (horizontal only)
	local flatLook = cam.CFrame.LookVector.Unit
	local right = cam.CFrame.RightVector
	local flatUp = right:Cross(flatLook).Unit

	hrp.CFrame = CFrame.fromMatrix(hrp.Position, flatLook, flatUp)
end)

-- Reconnect when character dies
player.CharacterAdded:Connect(function()
	character, humanoid, hrp = waitForCharacter()
	idleTrack = humanoid:LoadAnimation(idleAnim)
	flyTrack = humanoid:LoadAnimation(flyAnim)
	flying = false
end)
